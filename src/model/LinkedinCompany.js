/**
 * Proxycurl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CompanyLocation from './CompanyLocation';
import CompanyUpdate from './CompanyUpdate';
import Exit from './Exit';
import Funding from './Funding';
import LinkedinCompanyAcquisitions from './LinkedinCompanyAcquisitions';
import LinkedinCompanyExtra from './LinkedinCompanyExtra';
import LinkedinCompanyHq from './LinkedinCompanyHq';
import SimilarCompany from './SimilarCompany';

/**
 * The LinkedinCompany model module.
 * @module model/LinkedinCompany
 * @version 1.0.0
 */
class LinkedinCompany {
    /**
     * Constructs a new <code>LinkedinCompany</code>.
     * @alias module:model/LinkedinCompany
     */
    constructor() { 
        
        LinkedinCompany.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinkedinCompany</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkedinCompany} obj Optional instance to populate.
     * @return {module:model/LinkedinCompany} The populated <code>LinkedinCompany</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkedinCompany();

            if (data.hasOwnProperty('linkedin_internal_id')) {
                obj['linkedin_internal_id'] = ApiClient.convertToType(data['linkedin_internal_id'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
            if (data.hasOwnProperty('industry')) {
                obj['industry'] = ApiClient.convertToType(data['industry'], 'String');
            }
            if (data.hasOwnProperty('company_size')) {
                obj['company_size'] = ApiClient.convertToType(data['company_size'], ['Number']);
            }
            if (data.hasOwnProperty('company_size_on_linkedin')) {
                obj['company_size_on_linkedin'] = ApiClient.convertToType(data['company_size_on_linkedin'], 'Number');
            }
            if (data.hasOwnProperty('hq')) {
                obj['hq'] = LinkedinCompanyHq.constructFromObject(data['hq']);
            }
            if (data.hasOwnProperty('company_type')) {
                obj['company_type'] = ApiClient.convertToType(data['company_type'], 'String');
            }
            if (data.hasOwnProperty('founded_year')) {
                obj['founded_year'] = ApiClient.convertToType(data['founded_year'], 'Number');
            }
            if (data.hasOwnProperty('specialities')) {
                obj['specialities'] = ApiClient.convertToType(data['specialities'], ['String']);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [CompanyLocation]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tagline')) {
                obj['tagline'] = ApiClient.convertToType(data['tagline'], 'String');
            }
            if (data.hasOwnProperty('universal_name_id')) {
                obj['universal_name_id'] = ApiClient.convertToType(data['universal_name_id'], 'String');
            }
            if (data.hasOwnProperty('profile_pic_url')) {
                obj['profile_pic_url'] = ApiClient.convertToType(data['profile_pic_url'], 'String');
            }
            if (data.hasOwnProperty('background_cover_image_url')) {
                obj['background_cover_image_url'] = ApiClient.convertToType(data['background_cover_image_url'], 'String');
            }
            if (data.hasOwnProperty('search_id')) {
                obj['search_id'] = ApiClient.convertToType(data['search_id'], 'String');
            }
            if (data.hasOwnProperty('similar_companies')) {
                obj['similar_companies'] = ApiClient.convertToType(data['similar_companies'], [SimilarCompany]);
            }
            if (data.hasOwnProperty('updates')) {
                obj['updates'] = ApiClient.convertToType(data['updates'], [CompanyUpdate]);
            }
            if (data.hasOwnProperty('follower_count')) {
                obj['follower_count'] = ApiClient.convertToType(data['follower_count'], 'Number');
            }
            if (data.hasOwnProperty('acquisitions')) {
                obj['acquisitions'] = LinkedinCompanyAcquisitions.constructFromObject(data['acquisitions']);
            }
            if (data.hasOwnProperty('exit_data')) {
                obj['exit_data'] = ApiClient.convertToType(data['exit_data'], [Exit]);
            }
            if (data.hasOwnProperty('extra')) {
                obj['extra'] = LinkedinCompanyExtra.constructFromObject(data['extra']);
            }
            if (data.hasOwnProperty('funding_data')) {
                obj['funding_data'] = ApiClient.convertToType(data['funding_data'], [Funding]);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkedinCompany</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkedinCompany</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['linkedin_internal_id'] && !(typeof data['linkedin_internal_id'] === 'string' || data['linkedin_internal_id'] instanceof String)) {
            throw new Error("Expected the field `linkedin_internal_id` to be a primitive type in the JSON string but got " + data['linkedin_internal_id']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }
        // ensure the json data is a string
        if (data['industry'] && !(typeof data['industry'] === 'string' || data['industry'] instanceof String)) {
            throw new Error("Expected the field `industry` to be a primitive type in the JSON string but got " + data['industry']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['company_size'])) {
            throw new Error("Expected the field `company_size` to be an array in the JSON data but got " + data['company_size']);
        }
        // validate the optional field `hq`
        if (data['hq']) { // data not null
          LinkedinCompanyHq.validateJSON(data['hq']);
        }
        // ensure the json data is a string
        if (data['company_type'] && !(typeof data['company_type'] === 'string' || data['company_type'] instanceof String)) {
            throw new Error("Expected the field `company_type` to be a primitive type in the JSON string but got " + data['company_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['specialities'])) {
            throw new Error("Expected the field `specialities` to be an array in the JSON data but got " + data['specialities']);
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                CompanyLocation.validateJsonObject(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tagline'] && !(typeof data['tagline'] === 'string' || data['tagline'] instanceof String)) {
            throw new Error("Expected the field `tagline` to be a primitive type in the JSON string but got " + data['tagline']);
        }
        // ensure the json data is a string
        if (data['universal_name_id'] && !(typeof data['universal_name_id'] === 'string' || data['universal_name_id'] instanceof String)) {
            throw new Error("Expected the field `universal_name_id` to be a primitive type in the JSON string but got " + data['universal_name_id']);
        }
        // ensure the json data is a string
        if (data['profile_pic_url'] && !(typeof data['profile_pic_url'] === 'string' || data['profile_pic_url'] instanceof String)) {
            throw new Error("Expected the field `profile_pic_url` to be a primitive type in the JSON string but got " + data['profile_pic_url']);
        }
        // ensure the json data is a string
        if (data['background_cover_image_url'] && !(typeof data['background_cover_image_url'] === 'string' || data['background_cover_image_url'] instanceof String)) {
            throw new Error("Expected the field `background_cover_image_url` to be a primitive type in the JSON string but got " + data['background_cover_image_url']);
        }
        // ensure the json data is a string
        if (data['search_id'] && !(typeof data['search_id'] === 'string' || data['search_id'] instanceof String)) {
            throw new Error("Expected the field `search_id` to be a primitive type in the JSON string but got " + data['search_id']);
        }
        if (data['similar_companies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['similar_companies'])) {
                throw new Error("Expected the field `similar_companies` to be an array in the JSON data but got " + data['similar_companies']);
            }
            // validate the optional field `similar_companies` (array)
            for (const item of data['similar_companies']) {
                SimilarCompany.validateJsonObject(item);
            };
        }
        if (data['updates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['updates'])) {
                throw new Error("Expected the field `updates` to be an array in the JSON data but got " + data['updates']);
            }
            // validate the optional field `updates` (array)
            for (const item of data['updates']) {
                CompanyUpdate.validateJsonObject(item);
            };
        }
        // validate the optional field `acquisitions`
        if (data['acquisitions']) { // data not null
          LinkedinCompanyAcquisitions.validateJSON(data['acquisitions']);
        }
        if (data['exit_data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exit_data'])) {
                throw new Error("Expected the field `exit_data` to be an array in the JSON data but got " + data['exit_data']);
            }
            // validate the optional field `exit_data` (array)
            for (const item of data['exit_data']) {
                Exit.validateJsonObject(item);
            };
        }
        // validate the optional field `extra`
        if (data['extra']) { // data not null
          LinkedinCompanyExtra.validateJSON(data['extra']);
        }
        if (data['funding_data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['funding_data'])) {
                throw new Error("Expected the field `funding_data` to be an array in the JSON data but got " + data['funding_data']);
            }
            // validate the optional field `funding_data` (array)
            for (const item of data['funding_data']) {
                Funding.validateJsonObject(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['categories'])) {
            throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
        }

        return true;
    }


}



/**
 *          LinkedIn's Internal and immutable ID of this Company profile.                  
 * @member {String} linkedin_internal_id
 */
LinkedinCompany.prototype['linkedin_internal_id'] = undefined;

/**
 * @member {String} description
 */
LinkedinCompany.prototype['description'] = undefined;

/**
 * @member {String} website
 */
LinkedinCompany.prototype['website'] = undefined;

/**
 * @member {String} industry
 */
LinkedinCompany.prototype['industry'] = undefined;

/**
 * Listed range of company head count
 * @member {Array.<Number>} company_size
 */
LinkedinCompany.prototype['company_size'] = undefined;

/**
 * @member {Number} company_size_on_linkedin
 */
LinkedinCompany.prototype['company_size_on_linkedin'] = undefined;

/**
 * @member {module:model/LinkedinCompanyHq} hq
 */
LinkedinCompany.prototype['hq'] = undefined;

/**
 * Possible values:            `EDUCATIONAL`: Educational Institution          `GOVERNMENT_AGENCY`: Government Agency          `NON_PROFIT` : Nonprofit          `PARTNERSHIP` : Partnership          `PRIVATELY_HELD`: Privately Held          `PUBLIC_COMPANY`: Public Company          `SELF_EMPLOYED`: Self-Employed          `SELF_OWNED`: Sole Proprietorship
 * @member {String} company_type
 */
LinkedinCompany.prototype['company_type'] = undefined;

/**
 * @member {Number} founded_year
 */
LinkedinCompany.prototype['founded_year'] = undefined;

/**
 * @member {Array.<String>} specialities
 */
LinkedinCompany.prototype['specialities'] = undefined;

/**
 * @member {Array.<module:model/CompanyLocation>} locations
 */
LinkedinCompany.prototype['locations'] = undefined;

/**
 * @member {String} name
 */
LinkedinCompany.prototype['name'] = undefined;

/**
 * @member {String} tagline
 */
LinkedinCompany.prototype['tagline'] = undefined;

/**
 * @member {String} universal_name_id
 */
LinkedinCompany.prototype['universal_name_id'] = undefined;

/**
 * @member {String} profile_pic_url
 */
LinkedinCompany.prototype['profile_pic_url'] = undefined;

/**
 * @member {String} background_cover_image_url
 */
LinkedinCompany.prototype['background_cover_image_url'] = undefined;

/**
 * Useable with [Job listing endpoint](#jobs-api-jobs-listing-endpoint)
 * @member {String} search_id
 */
LinkedinCompany.prototype['search_id'] = undefined;

/**
 * @member {Array.<module:model/SimilarCompany>} similar_companies
 */
LinkedinCompany.prototype['similar_companies'] = undefined;

/**
 * @member {Array.<module:model/CompanyUpdate>} updates
 */
LinkedinCompany.prototype['updates'] = undefined;

/**
 * @member {Number} follower_count
 */
LinkedinCompany.prototype['follower_count'] = undefined;

/**
 * @member {module:model/LinkedinCompanyAcquisitions} acquisitions
 */
LinkedinCompany.prototype['acquisitions'] = undefined;

/**
 * @member {Array.<module:model/Exit>} exit_data
 */
LinkedinCompany.prototype['exit_data'] = undefined;

/**
 * @member {module:model/LinkedinCompanyExtra} extra
 */
LinkedinCompany.prototype['extra'] = undefined;

/**
 * Company Funding data when `funding_data=include`
 * @member {Array.<module:model/Funding>} funding_data
 */
LinkedinCompany.prototype['funding_data'] = undefined;

/**
 * A list of categories`
 * @member {Array.<String>} categories
 */
LinkedinCompany.prototype['categories'] = undefined;






export default LinkedinCompany;

