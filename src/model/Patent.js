/**
 * Proxycurl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PatentIssuedOn from './PatentIssuedOn';

/**
 * The Patent model module.
 * @module model/Patent
 * @version 1.0.0
 */
class Patent {
    /**
     * Constructs a new <code>Patent</code>.
     * @alias module:model/Patent
     */
    constructor() { 
        
        Patent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Patent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Patent} obj Optional instance to populate.
     * @return {module:model/Patent} The populated <code>Patent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Patent();

            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('issued_on')) {
                obj['issued_on'] = PatentIssuedOn.constructFromObject(data['issued_on']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('application_number')) {
                obj['application_number'] = ApiClient.convertToType(data['application_number'], 'String');
            }
            if (data.hasOwnProperty('patent_number')) {
                obj['patent_number'] = ApiClient.convertToType(data['patent_number'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Patent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Patent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // validate the optional field `issued_on`
        if (data['issued_on']) { // data not null
          PatentIssuedOn.validateJSON(data['issued_on']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['application_number'] && !(typeof data['application_number'] === 'string' || data['application_number'] instanceof String)) {
            throw new Error("Expected the field `application_number` to be a primitive type in the JSON string but got " + data['application_number']);
        }
        // ensure the json data is a string
        if (data['patent_number'] && !(typeof data['patent_number'] === 'string' || data['patent_number'] instanceof String)) {
            throw new Error("Expected the field `patent_number` to be a primitive type in the JSON string but got " + data['patent_number']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Title of the patent.
 * @member {String} title
 */
Patent.prototype['title'] = undefined;

/**
 * The organisation body that issued the patent.
 * @member {String} issuer
 */
Patent.prototype['issuer'] = undefined;

/**
 * @member {module:model/PatentIssuedOn} issued_on
 */
Patent.prototype['issued_on'] = undefined;

/**
 * Description of the patent.
 * @member {String} description
 */
Patent.prototype['description'] = undefined;

/**
 * Numerical representation that identifies the patent.
 * @member {String} application_number
 */
Patent.prototype['application_number'] = undefined;

/**
 * Application number of the patent.
 * @member {String} patent_number
 */
Patent.prototype['patent_number'] = undefined;

/**
 * @member {String} url
 */
Patent.prototype['url'] = undefined;






export default Patent;

