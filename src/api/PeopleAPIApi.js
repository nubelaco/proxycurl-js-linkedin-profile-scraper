/**
 * Proxycurl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PersonEndpointResponse from '../model/PersonEndpointResponse';
import ProfilePicture from '../model/ProfilePicture';
import RoleSearchResult from '../model/RoleSearchResult';
import UrlResult1 from '../model/UrlResult1';

/**
* PeopleAPI service.
* @module api/PeopleAPIApi
* @version 1.0.0
*/
export default class PeopleAPIApi {

    /**
    * Constructs a new PeopleAPIApi. 
    * @alias module:api/PeopleAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the personLookupEndpoint operation.
     * @callback module:api/PeopleAPIApi~personLookupEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlResult1} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 2 credits / successful request. Resolve LinkedIn Profile
     * @param {String} companyDomain Company name or domain
     * @param {String} firstName First name of the user
     * @param {Object} opts Optional parameters
     * @param {String} opts.location      The location of this user.      Name of country, city or state.     
     * @param {String} opts.title Title that user is holding at his/her current job
     * @param {String} opts.lastName Last name of the user
     * @param {module:api/PeopleAPIApi~personLookupEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlResult1}
     */
    personLookupEndpoint(companyDomain, firstName, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'companyDomain' is set
      if (companyDomain === undefined || companyDomain === null) {
        throw new Error("Missing the required parameter 'companyDomain' when calling personLookupEndpoint");
      }
      // verify the required parameter 'firstName' is set
      if (firstName === undefined || firstName === null) {
        throw new Error("Missing the required parameter 'firstName' when calling personLookupEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'company_domain': companyDomain,
        'location': opts['location'],
        'title': opts['title'],
        'last_name': opts['lastName'],
        'first_name': firstName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UrlResult1;
      return this.apiClient.callApi(
        '/api/linkedin/profile/resolve', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personProfileEndpoint operation.
     * @callback module:api/PeopleAPIApi~personProfileEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PersonEndpointResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 1 credit / successful request. Get structured data of a Personal Profile
     * @param {String} url      URL of the LinkedIn Profile to crawl.      URL should be in the format of `https://www.linkedin.com/in/<public-identifier>`     
     * @param {String} fallbackToCache      Tweaks the fallback behavior if an error arises from fetching a fresh profile.          This parameter accepts the following values:     * `on-error` (default value) - Fallback to reading the profile from cache if an error arises.     * `never` - Do not ever read profile from cache.     
     * @param {Object} opts Optional parameters
     * @param {String} opts.useCache `if-present` The default behavior. Fetches profile from cache regardless of age of profile. If profile is not available in cache, API will attempt to source profile externally.  `if-recent` API will make a best effort to return a fresh profile no older than 29 days.Costs an extra `1` credit on top of the cost of the base endpoint.
     * @param {String} opts.skills      Include skills data from external sources.      This parameter accepts the following values:     - `exclude` (default value) - Does not provide skills data field.     - `include` - Append skills data to the person profile object. Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).     
     * @param {String} opts.inferredSalary      Include inferred salary range from external sources.      This parameter accepts the following values:     - `exclude` (default value) - Does not provide inferred salary data field.     - `include` - Append inferred salary range data to the person profile object. Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).     
     * @param {String} opts.personalEmail      Enriches the Person Profile with personal emails from external sources.      This parameter accepts the following values:     - `exclude` (default value) - Does not provide personal emails data field.     - `include` - Append personal emails data to the person profile object. Costs an extra `1` credit per email returned on top of the cost of the base endpoint (if data is available).     
     * @param {String} opts.personalContactNumber      Enriches the Person Profile with personal numbers from external sources.      This parameter accepts the following values:     - `exclude` (default value) - Does not provide personal numbers data field.     - `include` - Append personal numbers data to the person profile object. Costs an extra `1` credit per email returned on top of the cost of the base endpoint (if data is available).     
     * @param {String} opts.twitterProfileId      Enriches the Person Profile with Twitter Id from external sources.      This parameter accepts the following values:     - `exclude` (default value) - Does not provide Twitter Id data field.     - `include` - Append Twitter Id data to the person profile object. Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).     
     * @param {String} opts.facebookProfileId      Enriches the Person Profile with Facebook Id from external sources.      This parameter accepts the following values:     - `exclude` (default value) - Does not provide Facebook Id data field.     - `include` - Append Facebook Id data to the person profile object. Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).     
     * @param {String} opts.githubProfileId      Enriches the Person Profile with Github Id from external sources.      This parameter accepts the following values:     - `exclude` (default value) - Does not provide Github Id data field.     - `include` - Append Github Id data to the person profile object. Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).     
     * @param {String} opts.extra      Enriches the Person Profile with extra details from external sources. Extra details include gender, birth date, industry and interests.      This parameter accepts the following values:     - `exclude` (default value) - Does not provide extra data field.     - `include` - Append extra data to the person profile object. Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).     
     * @param {module:api/PeopleAPIApi~personProfileEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PersonEndpointResponse}
     */
    personProfileEndpoint(url, fallbackToCache, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling personProfileEndpoint");
      }
      // verify the required parameter 'fallbackToCache' is set
      if (fallbackToCache === undefined || fallbackToCache === null) {
        throw new Error("Missing the required parameter 'fallbackToCache' when calling personProfileEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'url': url,
        'fallback_to_cache': fallbackToCache,
        'use_cache': opts['useCache'],
        'skills': opts['skills'],
        'inferred_salary': opts['inferredSalary'],
        'personal_email': opts['personalEmail'],
        'personal_contact_number': opts['personalContactNumber'],
        'twitter_profile_id': opts['twitterProfileId'],
        'facebook_profile_id': opts['facebookProfileId'],
        'github_profile_id': opts['githubProfileId'],
        'extra': opts['extra']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PersonEndpointResponse;
      return this.apiClient.callApi(
        '/api/v2/linkedin', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personProfilePictureEndpoint operation.
     * @callback module:api/PeopleAPIApi~personProfilePictureEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfilePicture} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 0 credit / successful request. Get the profile picture of a person.  Profile pictures are served from cached people profiles found within [LinkDB](https://nubela.co/proxycurl/linkdb). If the profile does not exist within [LinkDB](https://nubela.co/proxycurl/linkdb), then the API will return a `404` status code.
     * @param {String} linkedinPersonProfileUrl      LinkedIn Profile URL of the person that you are trying to get the profile picture of.     
     * @param {module:api/PeopleAPIApi~personProfilePictureEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfilePicture}
     */
    personProfilePictureEndpoint(linkedinPersonProfileUrl, callback) {
      let postBody = null;
      // verify the required parameter 'linkedinPersonProfileUrl' is set
      if (linkedinPersonProfileUrl === undefined || linkedinPersonProfileUrl === null) {
        throw new Error("Missing the required parameter 'linkedinPersonProfileUrl' when calling personProfilePictureEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'linkedin_person_profile_url': linkedinPersonProfileUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProfilePicture;
      return this.apiClient.callApi(
        '/api/linkedin/person/profile-picture', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the roleLookupEndpoint operation.
     * @callback module:api/PeopleAPIApi~roleLookupEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RoleSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 3 credits / successful request. Finds the closest (person) profile with a given role in a Company. For example, you can use this endpoint to find the \"CTO\" of \"Apple\". This API endpoint returns only one result that is the closest match.  There is also a [role search](https://nubela.co/blog/search-employees-with-employee-listing-api/) under the Employee Listing Endpoint if you require:  * precision on the target company * a list of employees that matches a role (instead of one result).
     * @param {String} role Role of the profile that you are lookin up
     * @param {String} companyName Name of the company that you are searching for
     * @param {module:api/PeopleAPIApi~roleLookupEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RoleSearchResult}
     */
    roleLookupEndpoint(role, companyName, callback) {
      let postBody = null;
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling roleLookupEndpoint");
      }
      // verify the required parameter 'companyName' is set
      if (companyName === undefined || companyName === null) {
        throw new Error("Missing the required parameter 'companyName' when calling roleLookupEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'role': role,
        'company_name': companyName
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleSearchResult;
      return this.apiClient.callApi(
        '/api/find/company/role', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
