/**
 * Proxycurl API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DisposableEmail from '../model/DisposableEmail';
import ExtractionEmailResult from '../model/ExtractionEmailResult';
import PDLEmailResult from '../model/PDLEmailResult';
import PDLPhoneNumberResult from '../model/PDLPhoneNumberResult';
import UrlResult from '../model/UrlResult';

/**
* ContactAPI service.
* @module api/ContactAPIApi
* @version 1.0.0
*/
export default class ContactAPIApi {

    /**
    * Constructs a new ContactAPIApi. 
    * @alias module:api/ContactAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the disposableEmailAddressCheckEndpoint operation.
     * @callback module:api/ContactAPIApi~disposableEmailAddressCheckEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisposableEmail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 0 credit / request. Given an email address, checks if the email address belongs to a disposable email service.
     * @param {String} email Email address to check
     * @param {module:api/ContactAPIApi~disposableEmailAddressCheckEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisposableEmail}
     */
    disposableEmailAddressCheckEndpoint(email, callback) {
      let postBody = null;
      // verify the required parameter 'email' is set
      if (email === undefined || email === null) {
        throw new Error("Missing the required parameter 'email' when calling disposableEmailAddressCheckEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'email': email
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisposableEmail;
      return this.apiClient.callApi(
        '/api/disposable-email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personalContactNumberLookupEndpoint operation.
     * @callback module:api/ContactAPIApi~personalContactNumberLookupEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PDLPhoneNumberResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 1 credit / contact number returned. Given an LinkedIn profile, returns a list of personal contact numbers belonging to this identity.
     * @param {String} linkedinProfileUrl      LinkedIn Profile URL of the person you want to extract personal contact numbers from.     
     * @param {module:api/ContactAPIApi~personalContactNumberLookupEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PDLPhoneNumberResult}
     */
    personalContactNumberLookupEndpoint(linkedinProfileUrl, callback) {
      let postBody = null;
      // verify the required parameter 'linkedinProfileUrl' is set
      if (linkedinProfileUrl === undefined || linkedinProfileUrl === null) {
        throw new Error("Missing the required parameter 'linkedinProfileUrl' when calling personalContactNumberLookupEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'linkedin_profile_url': linkedinProfileUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PDLPhoneNumberResult;
      return this.apiClient.callApi(
        '/api/contact-api/personal-contact', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the personalEmailLookupEndpoint operation.
     * @callback module:api/ContactAPIApi~personalEmailLookupEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PDLEmailResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 1 credit / email returned. Given an LinkedIn profile, returns a list of personal emails belonging to this identity. Emails are verified to be deliverable.
     * @param {String} linkedinProfileUrl      LinkedIn Profile URL of the person you want to extract personal email addresses from.     
     * @param {Object} opts Optional parameters
     * @param {String} opts.emailValidation      Perform deliverability validation on each email. (Costs 1 extra credit per email found).          Takes the following values:      * include - Perform email validation.      * exclude (default) - Do not perform email validation.     
     * @param {module:api/ContactAPIApi~personalEmailLookupEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PDLEmailResult}
     */
    personalEmailLookupEndpoint(linkedinProfileUrl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'linkedinProfileUrl' is set
      if (linkedinProfileUrl === undefined || linkedinProfileUrl === null) {
        throw new Error("Missing the required parameter 'linkedinProfileUrl' when calling personalEmailLookupEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'email_validation': opts['emailValidation'],
        'linkedin_profile_url': linkedinProfileUrl
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PDLEmailResult;
      return this.apiClient.callApi(
        '/api/contact-api/personal-email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reverseWorkEmailLookupEndpoint operation.
     * @callback module:api/ContactAPIApi~reverseWorkEmailLookupEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UrlResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 3 credits / successful request. Resolve LinkedIn Profile from a work email address
     * @param {String} workEmail Work email address of the user
     * @param {module:api/ContactAPIApi~reverseWorkEmailLookupEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UrlResult}
     */
    reverseWorkEmailLookupEndpoint(workEmail, callback) {
      let postBody = null;
      // verify the required parameter 'workEmail' is set
      if (workEmail === undefined || workEmail === null) {
        throw new Error("Missing the required parameter 'workEmail' when calling reverseWorkEmailLookupEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'work_email': workEmail
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UrlResult;
      return this.apiClient.callApi(
        '/api/linkedin/profile/resolve/email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workEmailLookupEndpoint operation.
     * @callback module:api/ContactAPIApi~workEmailLookupEndpointCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExtractionEmailResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cost: 3 credits / request. Lookup work email address of a LinkedIn Person Profile.  Email addresses returned are verified to not be role-based or catch-all emails. Email addresses returned by our API endpoint come with a 95+% deliverability guarantee  **Endpoint behavior**  *This endpoint* **_may not_** *return results immediately.*  If you provided a webhook in your request parameter, our application will call your webhook with the result once. See `Webhook request` below.
     * @param {String} linkedinProfileUrl      Linkedin Profile URL of the person you want to     extract work email address from.     
     * @param {Object} opts Optional parameters
     * @param {String} opts.callbackUrl      Webhook to notify your application when     the request has finished processing.     
     * @param {module:api/ContactAPIApi~workEmailLookupEndpointCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExtractionEmailResult}
     */
    workEmailLookupEndpoint(linkedinProfileUrl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'linkedinProfileUrl' is set
      if (linkedinProfileUrl === undefined || linkedinProfileUrl === null) {
        throw new Error("Missing the required parameter 'linkedinProfileUrl' when calling workEmailLookupEndpoint");
      }

      let pathParams = {
      };
      let queryParams = {
        'linkedin_profile_url': linkedinProfileUrl,
        'callback_url': opts['callbackUrl']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExtractionEmailResult;
      return this.apiClient.callApi(
        '/api/linkedin/profile/email', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
